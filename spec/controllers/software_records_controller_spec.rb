# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe SoftwareRecordsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # SoftwareRecord. As you add validations to SoftwareRecord, be sure to
  # adjust the attributes here as well.
  include Devise::Test::ControllerHelpers
  render_views

  before do
    admin = FactoryBot.create(:admin)
    sign_in_user(admin)

    VendorRecord.create!(
      title: 'Vendor 1',
      description: 'test vendor'
    )
    SoftwareType.create!(
      title: 'Web app',
      description: 'test software type'
    )
    Status.create!(
      title: 'Test',
      status_type: 'Design'
    )
    HostingEnvironment.create!(
      title: 'Test Env.',
      description: 'test env.'
    )
  end

  let(:change_attributes) do
    {
      change_title: 'A Good Software',
      change_description: 'A Good description about the software',
      software_record_id: 1,
      application_pages: 10,
      number_roles: 3,
      authentication_needed: true,
      custom_error_pages: true
    }
  end

  let(:valid_attributes) do
    {
      title: 'A Good Software',
      description: 'A Good description about the software',
      status_id: Status.first.id,
      software_type_id: SoftwareType.first.id,
      vendor_record_id: VendorRecord.first.id,
      created_by: 'Test Admin',
      developers: %w[Tester Random],
      tech_leads: ['Lead 1'],
      product_owners: %w[Owner1 Owner2],
      admin_users: %w[Admin1 Admin2],
      hosting_environment_id: HostingEnvironment.first.id,
      service: 'App Service',
      installed_version: '4.5',
      proposed_version: '4.4',
      last_upgrade_date: '2020-02-02',
      upgrade_available: true,
      vulnerabilities_reported: true,
      vulnerabilities_fixed: true,
      bug_fixes: true,
      new_features: true,
      breaking_changes: true,
      end_of_life: true,
      priority: '10',
      upgrade_status: 'Review',
      who: 'Test Admin',
      semester: 'Fall Quarter 2023',
      upgrade_docs: 'www.example.com',
      road_map: 'Road Map',
      qa_support_servers: 'server.example.com',
      dev_support_servers: 'dev.example.com',
      date_cert_expires: '2020-01-01',
      monitor_certificates: 'yes',
      themes: true,
      modules: true
    }
  end

  let(:invalid_attributes) do
    {
      title: '',
      description: '',
      status_id: '',
      software_type_id: '',
      vendor_record_id: ''
    }
  end

  let(:decommissioned_attributes) do
    {
      title: 'Decommissioned Software',
      description: 'A description',
      status: Status.create!(
        title: 'Decommissioned',
        status_type: 'Decommissioned'
      ),
      software_type_id: SoftwareType.first.id,
      vendor_record_id: VendorRecord.first.id,
      created_by: 'Test Admin',
      developers: %w[Tester Random],
      tech_leads: ['Lead 1'],
      product_owners: %w[Owner1 Owner2],
      admin_users: %w[Admin1 Admin2],
      hosting_environment_id: HostingEnvironment.first.id,
      service: 'App Service',
      installed_version: '4.5',
      proposed_version: '4.4',
      last_upgrade_date: '2020-02-02',
      upgrade_available: true,
      vulnerabilities_reported: true,
      vulnerabilities_fixed: true,
      bug_fixes: true,
      new_features: true,
      breaking_changes: true,
      end_of_life: true,
      priority: '10',
      upgrade_status: 'Review',
      who: 'Test Admin',
      semester: 'Fall Quarter 2023',
      upgrade_docs: 'www.example.com',
      road_map: 'Road Map',
      qa_support_servers: 'server.example.com',
      dev_support_servers: 'dev.example.com',
      date_cert_expires: '2020-01-01',
      monitor_certificates: 'yes',
      themes: true,
      modules: true
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SoftwareRecordsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  def sign_in_user(admin)
    sign_in admin
  end

  describe 'GET #list_road_map' do
    it 'assigns the requested software records to @software_records' do
      get :list_road_map
      expect(response).to be_successful
    end

    it 'renders the list_road_map template' do
      get :list_road_map
      expect(response).to render_template(:list_road_map)
    end

    context 'when filter_by is software_types and software_type_filter is provided' do
      it 'assigns filtered software records to @software_records' do
        SoftwareRecord.create! valid_attributes
        SoftwareRecord.create! decommissioned_attributes
        get :list_road_map, params: { filter_by: 'software_types', software_type_filter: SoftwareType.first.id }, session: valid_session
        expect(response.body).not_to match('\b(Decommissioned.Software)\b')
      end
    end

    context 'when filtering by vendor records' do
      it 'returns software records with the specified vendor record and not decommissioned' do
        SoftwareRecord.create! valid_attributes
        SoftwareRecord.create! decommissioned_attributes
        get :list_road_map, params: { filter_by: 'vendor_records', vendor_record_filter: VendorRecord.first.id }
        expect(response.body).not_to match('\b(Decommissioned.Software)\b')
      end
    end
  end

  context 'when filter_by is not software_types' do
    it 'assigns all software records to @software_records' do
      SoftwareRecord.create! valid_attributes
      SoftwareRecord.create! decommissioned_attributes
      get :list_road_map, params: { filter_by: 'other_filter' }, session: valid_session
      expect(response.body).not_to match('\b(Decommissioned.Software)\b')
    end
  end

  context 'when software_type_filter is nil or empty' do
    it 'assigns all software records to @software_records if filter_by is software_types' do
      software_record = SoftwareRecord.create! valid_attributes
      get :list_road_map, params: { filter_by: 'software_types', software_type_filter: nil }
      expect(assigns(:software_records)).to include(software_record)
      get :list_road_map, params: { filter_by: 'software_types', software_type_filter: '' }
      expect(assigns(:software_records)).to include(software_record)
      expect(response.body).not_to match('\b(Decommissioned.Software)\b')
    end
  end

  context 'when no filters are applied' do
    it 'assigns all software records to @software_records' do
      software_record1 = SoftwareRecord.create! valid_attributes
      software_record2 = SoftwareRecord.create! valid_attributes
      get :list_road_map
      expect(assigns(:software_records)).to match_array([software_record1, software_record2])
      expect(response.body).not_to match('\b(Decommissioned.Software)\b')
    end
  end

  describe 'GET #edit_road_map' do
    it 'assigns the requested software record to @software_record' do
      software_record = SoftwareRecord.create! valid_attributes
      get :edit_road_map, params: { id: software_record.to_param }
      expect(response).to be_successful
      expect(response).to render_template(:edit_road_map)
      expect(assigns(:software_record)).to eq(software_record)
    end

    it 'renders the edit_road_map template' do
      software_record = SoftwareRecord.create! valid_attributes
      get :edit_road_map, params: { id: software_record.to_param }
      expect(response).to render_template(:edit_road_map)
    end
  end

  describe 'GET #list_decommissioned' do
    it 'assigns the requested software records to @software_records' do
      get :list_decommissioned
      expect(response).to be_successful
    end

    it 'renders the list_road_map template' do
      get :list_decommissioned
      expect(response).to render_template(:list_decommissioned)
    end

    context 'when not filtering by software types or vendor records' do
      it 'returns all decommissioned software records' do
        software_record_decommissioned = SoftwareRecord.create! decommissioned_attributes
        get :list_decommissioned
        expect(assigns(:software_records)).to include(software_record_decommissioned)
      end
    end

    it 'sets the correct page title' do
      get :list_decommissioned
      expect(response.body).to match('\b(Decommissioned.List)\b')
    end
  end

  describe 'PATCH/PUT #update_road_map' do
    context 'with valid attributes' do
      it 'updates the software record' do
        software_record = SoftwareRecord.create! valid_attributes
        patch :update_road_map, params: { id: software_record.id, software_record: { road_map: 'New Road Map' } }
        software_record.reload
        expect(software_record.road_map).to eq('New Road Map')
        expect(response).to redirect_to(list_road_map_path)
      end

      it 'redirects to the list_road_map path with a notice' do
        software_record = SoftwareRecord.create! valid_attributes
        patch :update_road_map, params: { id: software_record.id, software_record: { road_map: 'New Road Map' } }
        expect(response).to redirect_to(list_road_map_path)
        expect(flash[:notice]).to eq('Road map was successfully updated.')
      end
    end

    context 'with invalid attributes' do
      it 'does not update the software record' do
        software_record = SoftwareRecord.create! valid_attributes
        patch :update_road_map, params: { id: software_record.id, software_record: invalid_attributes }
        software_record.reload
        expect(software_record.title).not_to eq('')
      end
    end
  end

  describe 'GET #index' do
    it 'returns a success response' do
      SoftwareRecord.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end

    it 'has the correct content' do
      SoftwareRecord.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response.body).to match('\b(A.Good.Software)\b')
      expect(response.body).to_not have_content('In Development')
    end

    it 'does not include decommissioned software records' do
      SoftwareRecord.create! valid_attributes
      SoftwareRecord.create! decommissioned_attributes
      get :index, params: {}, session: valid_session
      expect(response.body).to match('\b(A.Good.Software)\b')
      expect(response.body).not_to match('\b(Decommissioned.Software)\b')
    end

    context 'when filtering by software types' do
      it 'returns software records with the specified software type and not decommissioned' do
        software_record_active = SoftwareRecord.create! valid_attributes
        software_record_decommissioned = SoftwareRecord.create! decommissioned_attributes
        get :index, params: { filter_by: 'software_types', software_type_filter: SoftwareType.first.id }
        expect(assigns(:software_records)).to include(software_record_active)
        expect(assigns(:software_records)).not_to include(software_record_decommissioned)
      end
    end

    context 'when filtering by vendor records' do
      it 'returns software records with the specified vendor record and not decommissioned' do
        software_record_active = SoftwareRecord.create! valid_attributes
        software_record_decommissioned = SoftwareRecord.create! decommissioned_attributes
        get :index, params: { filter_by: 'vendor_records', vendor_record_filter: VendorRecord.first.id }
        expect(assigns(:software_records)).to include(software_record_active)
        expect(assigns(:software_records)).not_to include(software_record_decommissioned)
      end
    end

    context 'when not filtering by software types or vendor records' do
      it 'returns all software records that are not decommissioned' do
        software_record_active = SoftwareRecord.create! valid_attributes
        software_record_decommissioned = SoftwareRecord.create! decommissioned_attributes
        get :index
        expect(assigns(:software_records)).to include(software_record_active)
        expect(assigns(:software_records)).not_to include(software_record_decommissioned)
      end
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      software_record = SoftwareRecord.create! valid_attributes
      get :show, params: { id: software_record.to_param }, session: valid_session
      expect(response).to be_successful
      expect(response.body).to have_content('A Good Software')
      expect(response.body).to have_content(Status.first.id)
      expect(response.body).to have_content(HostingEnvironment.first.title)
      expect(response.body).to have_content('Test Admin')
      expect(response.body).to have_content('Tester')
      expect(response.body).to have_content('Random')
      expect(response.body).to have_content('Lead 1')
      expect(response.body).to have_content('Owner1')
      expect(response.body).to have_content('Owner2')
      expect(response.body).to have_content('Admin1')
      expect(response.body).to have_content('Admin2')
      expect(response.body).to have_content('App Service')
      expect(response.body).to have_content('4.5')
      expect(response.body).to have_content('4.4')
      expect(response.body).to have_content('2020-02-02')
      expect(response.body).to have_content('true')
      expect(response.body).to have_content('10')
      expect(response.body).to have_content('Review')
      expect(response.body).to have_content('Road Map')
      expect(response.body).to have_content('Fall Quarter 2023')
      expect(response.body).to have_content('server.example.com')
      expect(response.body).to have_content('dev.example.com')
      expect(response.body).to have_content('2020-01-01')
      expect(response.body).to have_content('yes')
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
      expect(response).to render_template(:new)
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      software_record = SoftwareRecord.create! valid_attributes
      get :edit, params: { id: software_record.to_param }, session: valid_session
      expect(response).to be_successful
      expect(response).to render_template(:edit)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new SoftwareRecord' do
        expect do
          post :create, params: { software_record: valid_attributes }, session: valid_session
        end.to change(SoftwareRecord, :count).by(1)
      end

      it 'redirects to the created software_record' do
        post :create, params: { software_record: valid_attributes }, session: valid_session
        expect(response).to redirect_to(SoftwareRecord.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { software_record: invalid_attributes }, session: valid_session
        expect(response).to be_successful
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          title: 'A Great Software v2.0',
          description: 'An Updated good description of the software',
          status_id: Status.first.id,
          software_type_id: SoftwareType.first.id,
          vendor_record_id: VendorRecord.first.id,
          hosting_environment_id: HostingEnvironment.first.id,
          created_by: 'Test Admin',
          developers: %w[Developer Developer2],
          tech_leads: %w[Lead Lead2],
          product_owners: %w[Owner Owner2],
          admin_users: %w[Admin Admin2],
          service: 'App Service',
          installed_version: '4.5',
          proposed_version: '4.4',
          last_upgrade_date: '2020-02-02',
          upgrade_available: true,
          vulnerabilities_reported: true,
          vulnerabilities_fixed: true,
          bug_fixes: true,
          new_features: true,
          breaking_changes: true,
          end_of_life: true,
          priority: '10',
          upgrade_status: 'Review',
          who: 'Test Admin',
          semester: 'Fall Quarter 2023',
          road_map: 'Road Map',
          upgrade_docs: 'www.example.com',
          qa_support_servers: 'server.example.com',
          dev_support_servers: 'dev.example.com',
          date_cert_expires: '2020-01-01',
          monitor_certificates: 'yes'
        }
      end

      it 'updates the requested software_record' do
        software_record = SoftwareRecord.create! new_attributes
        put :update, params: { id: software_record.to_param, software_record: new_attributes }, session: valid_session
        software_record.reload
        expect(software_record.title).to eq('A Great Software v2.0')
        expect(software_record.description).to eq('An Updated good description of the software')
        expect(software_record.created_by).to eq('Test Admin')
        expect(software_record.developers).to have_content('Developer')
        expect(software_record.developers).to have_content('Developer2')
        expect(software_record.tech_leads).to have_content('Lead')
        expect(software_record.tech_leads).to have_content('Lead2')
        expect(software_record.product_owners).to have_content('Owner')
        expect(software_record.product_owners).to have_content('Owner2')
        expect(software_record.admin_users).to have_content('Admin')
        expect(software_record.admin_users).to have_content('Admin2')
        expect(software_record.service).to have_content('App Service')
        expect(software_record.installed_version).to have_content('4.5')
        expect(software_record.proposed_version).to have_content('4.4')
        expect(software_record.last_upgrade_date).to have_content('2020-02-02')
        expect(software_record.upgrade_available).to have_content('true')
        expect(software_record.priority).to have_content('10')
        expect(software_record.upgrade_status).to have_content('Review')
        expect(software_record.semester).to have_content('Fall Quarter 2023')
        expect(software_record.road_map).to have_content('Road Map')
        expect(software_record.upgrade_docs).to have_content('www.example.com')
        expect(software_record.qa_support_servers).to have_content('server.example.com')
        expect(software_record.dev_support_servers).to have_content('dev.example.com')
        expect(software_record.date_cert_expires).to have_content('2020-01-01')
        expect(software_record.monitor_certificates).to have_content('yes')
      end

      it 'redirects to the software_record' do
        software_record = SoftwareRecord.create! valid_attributes
        put :update, params: { id: software_record.to_param, software_record: valid_attributes }, session: valid_session
        expect(response).to redirect_to(software_record)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        software_record = SoftwareRecord.create! valid_attributes
        put :update, params: { id: software_record.to_param, software_record: invalid_attributes }, session: valid_session
        expect(response).to be_successful
        expect(response).to render_template(:edit)
        expect(response.body).to have_content("Title can\\'t be blank")
        expect(response.body).to have_content("Description can\\'t be blank")
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested software_record' do
      software_record = SoftwareRecord.create! valid_attributes
      ChangeRequest.create! change_attributes

      expect do
        delete :destroy, params: { id: software_record.to_param }, session: valid_session
      end.to change(SoftwareRecord, :count).by(-1)
    end

    it 'also destroys the change request associated with the software_record' do
      software_record = SoftwareRecord.create! valid_attributes
      ChangeRequest.create! change_attributes
      expect do
        delete :destroy, params: { id: software_record.to_param }, session: valid_session
      end.to change(ChangeRequest, :count).by(-1)
      expect(response).to redirect_to(session[:previous])
    end

    it 'redirects to the software_records list' do
      session[:previous] = software_records_url
      software_record = SoftwareRecord.create! valid_attributes
      delete :destroy, params: { id: software_record.to_param }, session: valid_session
      expect(response).to redirect_to(session[:previous])
    end
  end
end

# viewer specs

RSpec.describe SoftwareRecordsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # SoftwareRecord. As you add validations to SoftwareRecord, be sure to
  # adjust the attributes here as well.
  include Devise::Test::ControllerHelpers
  render_views

  before do
    viewer = FactoryBot.create(:viewer)
    sign_in_user(viewer)

    VendorRecord.create!(
      title: 'Vendor 1',
      description: 'test vendor'
    )
    SoftwareType.create!(
      title: 'Web app',
      description: 'test software type'
    )
    Status.create!(
      title: 'Test',
      status_type: 'Design'
    )
    HostingEnvironment.create!(
      title: 'Test Env.',
      description: 'test env 2'
    )
  end

  let(:valid_attributes) do
    {
      title: 'A Good Software',
      description: 'A Good description about the software',
      status_id: Status.first.id,
      software_type_id: SoftwareType.first.id,
      vendor_record_id: VendorRecord.first.id,
      hosting_environment_id: HostingEnvironment.first.id,
      created_by: 'Test Viewer',
      developers: %w[Tester Random],
      tech_leads: ['Lead 1'],
      product_owners: %w[Owner1 Owner2],
      admin_users: %w[Admin1 Admin2],
      service: 'App Service',
      installed_version: '4.5',
      proposed_version: '4.4',
      last_upgrade_date: '2020-02-02',
      upgrade_available: true,
      vulnerabilities_reported: true,
      vulnerabilities_fixed: true,
      bug_fixes: true,
      new_features: true,
      breaking_changes: true,
      end_of_life: true,
      priority: '10',
      upgrade_status: 'Review',
      who: 'Test Admin',
      semester: 'Fall Quarter 2023',
      road_map: 'Road Map',
      upgrade_docs: 'www.example.com',
      qa_support_servers: 'server.example.com',
      dev_support_servers: 'dev.example.com',
      date_cert_expires: '2020-01-01',
      monitor_certificates: 'yes',
      themes: true,
      modules: true
    }
  end

  let(:invalid_attributes) do
    {
      title: '',
      description: '',
      status_id: '',
      software_type_id: '',
      vendor_record_id: ''
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SoftwareRecordsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  def sign_in_user(viewer)
    sign_in viewer
  end

  describe 'GET #index' do
    it 'returns a success response' do
      SoftwareRecord.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end

    it 'has the correct content' do
      SoftwareRecord.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response.body).to match('\b(A.Good.Software)\b')
      expect(response.body).to_not have_content('In Development')
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      software_record = SoftwareRecord.create! valid_attributes
      get :show, params: { id: software_record.to_param }, session: valid_session
      expect(response).to be_successful
      expect(response.body).to have_content('A Good Software')
      expect(response.body).not_to have_content('Test Viewer')
      expect(response.body).to have_content('Tester')
      expect(response.body).to have_content('Random')
      expect(response.body).to have_content('Lead 1')
      expect(response.body).to have_content('Owner1')
      expect(response.body).to have_content('Owner2')
      expect(response.body).to have_content('Admin1')
      expect(response.body).to have_content('Admin2')
      expect(response.body).to have_content('App Service')
      expect(response.body).to have_content('4.5')
      expect(response.body).to have_content('4.4')
      expect(response.body).to have_content('2020-02-02')
      expect(response.body).to have_content('true')
      expect(response.body).to have_content('10')
      expect(response.body).to have_content('Review')
      expect(response.body).to have_content('Fall Quarter 2023')
      expect(software_record.road_map).to have_content('Road Map')
      expect(response.body).to have_content('server.example.com')
      expect(response.body).to have_content('dev.example.com')
      expect(response.body).to have_content('2020-01-01')
      expect(response.body).to have_content('yes')
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to_not be_successful
      expect(response).to_not render_template(:new)
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      software_record = SoftwareRecord.create! valid_attributes
      get :edit, params: { id: software_record.to_param }, session: valid_session
      expect(response).to_not be_successful
      expect(response).to_not render_template(:edit)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new SoftwareRecord' do
        expect do
          post :create, params: { software_record: valid_attributes }, session: valid_session
        end.to change(SoftwareRecord, :count).by(1)
      end

      it 'redirects to the created software_record' do
        post :create, params: { software_record: valid_attributes }, session: valid_session
        expect(response).to redirect_to(SoftwareRecord.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { software_record: invalid_attributes }, session: valid_session
        expect(response).to_not be_successful
        expect(response).to redirect_to '/request/new'
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          title: 'A Great Software v2.0',
          description: 'An Updated good description of the software',
          status_id: Status.first.id,
          software_type_id: SoftwareType.first.id,
          vendor_record_id: VendorRecord.first.id,
          hosting_environment_id: HostingEnvironment.first.id,
          created_by: 'Test Viewer',
          developers: %w[Developer Developer2],
          tech_leads: %w[Lead Lead2],
          product_owners: %w[Owner Owner2],
          admin_users: %w[Admin Admin2],
          service: 'App Service',
          installed_version: '4.5',
          proposed_version: '4.4',
          last_upgrade_date: '2020-02-02',
          upgrade_available: true,
          vulnerabilities_reported: true,
          vulnerabilities_fixed: true,
          bug_fixes: true,
          new_features: true,
          breaking_changes: true,
          end_of_life: true,
          priority: '10',
          upgrade_status: 'Review',
          who: 'Test Admin',
          semester: 'Fall Quarter 2023',
          road_map: 'Road Map',
          upgrade_docs: 'www.example.com',
          qa_support_servers: 'server.example.com',
          dev_support_servers: 'dev.example.com',
          date_cert_expires: '2020-01-01',
          monitor_certificates: 'yes'
        }
      end

      it 'updates the requested software_record' do
        software_record = SoftwareRecord.create! new_attributes
        put :update, params: { id: software_record.to_param, software_record: new_attributes }, session: valid_session
        software_record.reload
        expect(software_record.title).to eq('A Great Software v2.0')
        expect(software_record.description).to eq('An Updated good description of the software')
        expect(software_record.created_by).to eq('Test Viewer')
        expect(software_record.developers).to have_content('Developer')
        expect(software_record.developers).to have_content('Developer2')
        expect(software_record.tech_leads).to have_content('Lead')
        expect(software_record.tech_leads).to have_content('Lead2')
        expect(software_record.product_owners).to have_content('Owner')
        expect(software_record.product_owners).to have_content('Owner2')
        expect(software_record.admin_users).to have_content('Admin')
        expect(software_record.admin_users).to have_content('Admin2')
        expect(software_record.service).to have_content('App Service')
        expect(software_record.installed_version).to have_content('4.5')
        expect(software_record.proposed_version).to have_content('4.4')
        expect(software_record.last_upgrade_date).to have_content('2020-02-02')
        expect(software_record.upgrade_available).to have_content('true')
        expect(software_record.priority).to have_content('10')
        expect(software_record.upgrade_status).to have_content('Review')
        expect(software_record.semester).to have_content('Fall Quarter 2023')
        expect(software_record.road_map).to have_content('Road Map')
        expect(software_record.upgrade_docs).to have_content('www.example.com')
        expect(software_record.qa_support_servers).to have_content('server.example.com')
        expect(software_record.dev_support_servers).to have_content('dev.example.com')
        expect(software_record.date_cert_expires).to have_content('2020-01-01')
        expect(software_record.monitor_certificates).to have_content('yes')
      end

      it 'redirects to the software_record' do
        software_record = SoftwareRecord.create! valid_attributes
        put :update, params: { id: software_record.to_param, software_record: valid_attributes }, session: valid_session
        expect(response).to_not redirect_to(software_record)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        software_record = SoftwareRecord.create! valid_attributes
        put :update, params: { id: software_record.to_param, software_record: invalid_attributes }, session: valid_session
        expect(response).to_not be_successful
        expect(response).to_not render_template(:edit)
        expect(response.body).to_not have_content("Title can\\'t be blank")
        expect(response.body).to_not have_content("Description can\\'t be blank")
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested software_record' do
      software_record = SoftwareRecord.create! valid_attributes
      expect do
        delete :destroy, params: { id: software_record.to_param }, session: valid_session
      end.to change(SoftwareRecord, :count).by(0)
    end

    it 'redirects to the software_records list' do
      software_record = SoftwareRecord.create! valid_attributes
      delete :destroy, params: { id: software_record.to_param }, session: valid_session
      expect(response).to_not redirect_to(software_records_url)
    end
  end
end

# manager specs

RSpec.describe SoftwareRecordsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # SoftwareRecord. As you add validations to SoftwareRecord, be sure to
  # adjust the attributes here as well.
  include Devise::Test::ControllerHelpers
  render_views

  before do
    manager = FactoryBot.create(:manager)
    sign_in_user(manager)

    VendorRecord.create!(
      title: 'Vendor 1',
      description: 'test vendor'
    )
    SoftwareType.create!(
      title: 'Web app',
      description: 'test software type'
    )
    Status.create!(
      title: 'Test',
      status_type: 'Design'
    )
    HostingEnvironment.create!(
      title: 'Test Env.',
      description: 'test env.'
    )
  end

  let(:valid_attributes) do
    {
      title: 'A Good Software',
      description: 'A Good description about the software',
      status_id: Status.first.id,
      software_type_id: SoftwareType.first.id,
      vendor_record_id: VendorRecord.first.id,
      hosting_environment_id: HostingEnvironment.first.id,
      created_by: 'Test Manager',
      developers: %w[Tester Random],
      tech_leads: ['Lead 1'],
      product_owners: %w[Owner1 Owner2],
      admin_users: %w[Admin1 Admin2],
      service: 'App Service',
      installed_version: '4.5',
      proposed_version: '4.4',
      last_upgrade_date: '2020-02-02',
      upgrade_available: true,
      vulnerabilities_reported: true,
      vulnerabilities_fixed: true,
      bug_fixes: true,
      new_features: true,
      breaking_changes: true,
      end_of_life: true,
      priority: '10',
      upgrade_status: 'Review',
      who: 'Test Admin',
      semester: 'Fall Quarter 2023',
      road_map: 'Road Map',
      upgrade_docs: 'www.example.com',
      qa_support_servers: 'server.example.com',
      dev_support_servers: 'dev.example.com',
      date_cert_expires: '2020-01-01',
      monitor_certificates: 'yes',
      themes: true,
      modules: true
    }
  end

  let(:invalid_attributes) do
    {
      title: '',
      description: '',
      status: '',
      software_type_id: '',
      vendor_record_id: ''
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SoftwareRecordsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  def sign_in_user(manager)
    sign_in manager
  end

  describe 'GET #list_road_map' do
    it 'assigns the requested software records to @software_records' do
      get :list_road_map
      expect(response).to be_successful
      expect(response).to render_template(:list_road_map)
    end
  end

  describe 'GET #edit_road_map' do
    it 'assigns the requested software record to @software_record' do
      software_record = SoftwareRecord.create! valid_attributes
      get :edit_road_map, params: { id: software_record.to_param }
      expect(response).to be_successful
      expect(response).to render_template(:edit_road_map)
    end
  end

  describe 'PATCH/PUT #update_road_map' do
    context 'with valid attributes' do
      it 'updates the software record' do
        software_record = SoftwareRecord.create! valid_attributes
        patch :update_road_map, params: { id: software_record.to_param, software_record: { road_map: 'New Road Map' } }
        software_record.reload
        expect(software_record.road_map).to eq('New Road Map')
        expect(response).to redirect_to(list_road_map_path)
      end
    end
  end

  describe 'GET #index' do
    it 'returns a success response' do
      SoftwareRecord.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end

    it 'has the correct content' do
      SoftwareRecord.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response.body).to match('\b(A.Good.Software)\b')
      expect(response.body).to_not have_content('In Development')
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      software_record = SoftwareRecord.create! valid_attributes
      get :show, params: { id: software_record.to_param }, session: valid_session
      expect(response).to be_successful
      expect(response.body).to have_content('A Good Software')
      expect(response.body).not_to have_content('Test Manager')
      expect(response.body).to have_content('Tester')
      expect(response.body).to have_content('Random')
      expect(response.body).to have_content('Lead 1')
      expect(response.body).to have_content('Owner1')
      expect(response.body).to have_content('Owner2')
      expect(response.body).to have_content('Admin1')
      expect(response.body).to have_content('Admin2')
      expect(response.body).to have_content('App Service')
      expect(response.body).to have_content('4.5')
      expect(response.body).to have_content('4.4')
      expect(response.body).to have_content('2020-02-02')
      expect(response.body).to have_content('true')
      expect(response.body).to have_content('10')
      expect(response.body).to have_content('Review')
      expect(response.body).to have_content('Fall Quarter 2023')
      expect(response.body).to have_content('Road Map')
      expect(response.body).to have_content('server.example.com')
      expect(response.body).to have_content('dev.example.com')
      expect(response.body).to have_content('2020-01-01')
      expect(response.body).to have_content('yes')
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
      expect(response).to render_template(:new)
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      software_record = SoftwareRecord.create! valid_attributes
      get :edit, params: { id: software_record.to_param }, session: valid_session
      expect(response).to be_successful
      expect(response).to render_template(:edit)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new SoftwareRecord' do
        expect do
          post :create, params: { software_record: valid_attributes }, session: valid_session
        end.to change(SoftwareRecord, :count).by(1)
      end

      it 'redirects to the created software_record' do
        post :create, params: { software_record: valid_attributes }, session: valid_session
        expect(response).to redirect_to(SoftwareRecord.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { software_record: invalid_attributes }, session: valid_session
        expect(response).to be_successful
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          title: 'A Great Software v2.0',
          description: 'An Updated good description of the software',
          status_id: Status.first.id,
          software_type_id: SoftwareType.first.id,
          vendor_record_id: VendorRecord.first.id,
          hosting_environment_id: HostingEnvironment.first.id,
          created_by: 'Test Manager',
          developers: %w[Developer Developer2],
          tech_leads: %w[Lead Lead2],
          product_owners: %w[Owner Owner2],
          admin_users: %w[Admin Admin2],
          service: 'App Service',
          installed_version: '4.5',
          proposed_version: '4.4',
          last_upgrade_date: '2020-02-02',
          upgrade_available: true,
          vulnerabilities_reported: true,
          vulnerabilities_fixed: true,
          bug_fixes: true,
          new_features: true,
          breaking_changes: true,
          end_of_life: true,
          priority: '10',
          upgrade_status: 'Review',
          who: 'Test Admin',
          semester: 'Fall Quarter 2023',
          road_map: 'Road Map',
          upgrade_docs: 'www.example.com',
          qa_support_servers: 'server.example.com',
          dev_support_servers: 'dev.example.com',
          date_cert_expires: '2020-01-01',
          monitor_certificates: 'yes',
          themes: true,
          modules: true
        }
      end

      it 'updates the requested software_record' do
        software_record = SoftwareRecord.create! new_attributes
        put :update, params: { id: software_record.to_param, software_record: new_attributes }, session: valid_session
        software_record.reload
        expect(software_record.title).to eq('A Great Software v2.0')
        expect(software_record.description).to eq('An Updated good description of the software')
        expect(software_record.created_by).to eq('Test Manager')
        expect(software_record.developers).to have_content('Developer')
        expect(software_record.developers).to have_content('Developer2')
        expect(software_record.tech_leads).to have_content('Lead')
        expect(software_record.tech_leads).to have_content('Lead2')
        expect(software_record.product_owners).to have_content('Owner')
        expect(software_record.product_owners).to have_content('Owner2')
        expect(software_record.admin_users).to have_content('Admin')
        expect(software_record.admin_users).to have_content('Admin2')
        expect(software_record.service).to have_content('App Service')
        expect(software_record.installed_version).to have_content('4.5')
        expect(software_record.proposed_version).to have_content('4.4')
        expect(software_record.last_upgrade_date).to have_content('2020-02-02')
        expect(software_record.upgrade_available).to have_content('true')
        expect(software_record.priority).to have_content('10')
        expect(software_record.upgrade_status).to have_content('Review')
        expect(software_record.semester).to have_content('Fall Quarter 2023')
        expect(software_record.road_map).to have_content('Road Map')
        expect(software_record.upgrade_docs).to have_content('www.example.com')
        expect(software_record.qa_support_servers).to have_content('server.example.com')
        expect(software_record.dev_support_servers).to have_content('dev.example.com')
        expect(software_record.date_cert_expires).to have_content('2020-01-01')
        expect(software_record.monitor_certificates).to have_content('yes')
      end

      it 'redirects to the software_record' do
        software_record = SoftwareRecord.create! valid_attributes
        put :update, params: { id: software_record.to_param, software_record: valid_attributes }, session: valid_session
        expect(response).to redirect_to(software_record)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        software_record = SoftwareRecord.create! valid_attributes
        put :update, params: { id: software_record.to_param, software_record: invalid_attributes }, session: valid_session
        expect(response).to be_successful
        expect(response).to render_template(:edit)
        expect(response.body).to have_content("Title can\\'t be blank")
        expect(response.body).to have_content("Description can\\'t be blank")
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested software_record' do
      software_record = SoftwareRecord.create! valid_attributes
      expect do
        delete :destroy, params: { id: software_record.to_param }, session: valid_session
      end.to change(SoftwareRecord, :count).by(-1)
    end

    it 'redirects to the software_records list' do
      session[:previous] = software_records_url
      software_record = SoftwareRecord.create! valid_attributes
      delete :destroy, params: { id: software_record.to_param }, session: valid_session
      expect(response).to redirect_to(session[:previous])
    end
  end
end

# owner specs

RSpec.describe SoftwareRecordsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # SoftwareRecord. As you add validations to SoftwareRecord, be sure to
  # adjust the attributes here as well.
  include Devise::Test::ControllerHelpers
  render_views

  before do
    owner = FactoryBot.create(:owner)
    sign_in_user(owner)

    VendorRecord.create!(
      title: 'Vendor 1',
      description: 'test vendor'
    )
    SoftwareType.create!(
      title: 'Web app',
      description: 'test software type'
    )
    Status.create!(
      title: 'Test',
      status_type: 'Design'
    )
    HostingEnvironment.create!(
      title: 'Test Env.',
      description: 'test env.'
    )
  end

  let(:valid_attributes) do
    {
      title: 'A Good Software',
      description: 'A Good description about the software',
      status_id: Status.first.id,
      software_type_id: SoftwareType.first.id,
      vendor_record_id: VendorRecord.first.id,
      hosting_environment_id: HostingEnvironment.first.id,
      created_by: 'Test Owner',
      developers: %w[Tester Random],
      tech_leads: ['Lead 1'],
      product_owners: %w[Owner1 Owner2],
      admin_users: %w[Admin1 Admin2],
      service: 'App Service',
      installed_version: '4.5',
      proposed_version: '4.4',
      last_upgrade_date: '2020-02-02',
      upgrade_available: true,
      vulnerabilities_reported: true,
      vulnerabilities_fixed: true,
      bug_fixes: true,
      new_features: true,
      breaking_changes: true,
      end_of_life: true,
      priority: '10',
      upgrade_status: 'Review',
      road_map: 'Road Map',
      who: 'Test Admin',
      semester: 'Fall Quarter 2023',
      upgrade_docs: 'www.example.com',
      qa_support_servers: 'server.example.com',
      dev_support_servers: 'dev.example.com',
      date_cert_expires: '2020-01-01',
      monitor_certificates: 'yes',
      themes: true,
      modules: true
    }
  end

  let(:invalid_attributes) do
    {
      title: '',
      description: '',
      status_id: '',
      software_type_id: '',
      vendor_record_id: ''
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SoftwareRecordsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  def sign_in_user(owner)
    sign_in owner
  end

  describe 'GET #list_road_map' do
    it 'assigns the requested software records to @software_records' do
      get :list_road_map
      expect(response).to be_successful
      expect(response).to render_template(:list_road_map)
    end
  end

  describe 'GET #edit_road_map' do
    it 'assigns the requested software record to @software_record' do
      software_record = SoftwareRecord.create! valid_attributes
      get :edit_road_map, params: { id: software_record.to_param }
      expect(response).to be_successful
      expect(response).to render_template(:edit_road_map)
    end
  end

  #  describe "PATCH/PUT #update_road_map" do
  #    context "with valid attributes" do
  #      it "updates the software record" do
  #        software_record = SoftwareRecord.create! valid_attributes
  #        patch :update_road_map, params: { id: software_record.to_param, software_record: { road_map: "New Road Map" } }
  #        software_record.reload
  #        expect(software_record.road_map).to eq("New Road Map")
  #        expect(response).to redirect_to(list_road_map_path)
  #      end
  #    end

  describe 'GET #index' do
    it 'returns a success response' do
      SoftwareRecord.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end

    it 'has the correct content' do
      SoftwareRecord.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response.body).to match('\b(A.Good.Software)\b')
      expect(response.body).to_not have_content('In Development')
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      software_record = SoftwareRecord.create! valid_attributes
      get :show, params: { id: software_record.to_param }, session: valid_session
      expect(response).to be_successful
      expect(response.body).to have_content('A Good Software')
      expect(response.body).not_to have_content('Test Owner')
      expect(response.body).to have_content('Tester')
      expect(response.body).to have_content('Random')
      expect(response.body).to have_content('Lead 1')
      expect(response.body).to have_content('Owner1')
      expect(response.body).to have_content('Owner2')
      expect(response.body).to have_content('Admin1')
      expect(response.body).to have_content('Admin2')
      expect(response.body).to have_content('App Service')
      expect(response.body).to have_content('4.5')
      expect(response.body).to have_content('4.4')
      expect(response.body).to have_content('2020-02-02')
      expect(response.body).to have_content('true')
      expect(response.body).to have_content('10')
      expect(response.body).to have_content('Review')
      expect(response.body).to have_content('Fall Quarter 2023')
      expect(response.body).to have_content('Fall Quarter 2023')
      expect(response.body).to have_content('server.example.com')
      expect(response.body).to have_content('dev.example.com')
      expect(response.body).to have_content('2020-01-01')
      expect(response.body).to have_content('yes')
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to_not be_successful
      expect(response).to_not render_template(:new)
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      software_record = SoftwareRecord.create! valid_attributes
      get :edit, params: { id: software_record.to_param }, session: valid_session
      expect(response).to be_successful
      expect(response).to render_template(:edit)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new SoftwareRecord' do
        expect do
          post :create, params: { software_record: valid_attributes }, session: valid_session
        end.to change(SoftwareRecord, :count).by(1)
      end

      it 'redirects to the created software_record' do
        post :create, params: { software_record: valid_attributes }, session: valid_session
        expect(response).to redirect_to(SoftwareRecord.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { software_record: invalid_attributes }, session: valid_session
        expect(response).to_not be_successful
        expect(response).to redirect_to('/request/new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          title: 'A Great Software v2.0',
          description: 'An Updated good description of the software',
          status_id: Status.first.id,
          software_type_id: SoftwareType.first.id,
          vendor_record_id: VendorRecord.first.id,
          hosting_environment_id: HostingEnvironment.first.id,
          created_by: 'Test Owner',
          developers: %w[Developer Developer2],
          tech_leads: %w[Lead Lead2],
          product_owners: %w[Owner Owner2],
          admin_users: %w[Admin Admin2],
          service: 'App Service',
          installed_version: '4.5',
          proposed_version: '4.4',
          last_upgrade_date: '2020-02-02',
          upgrade_available: true,
          vulnerabilities_reported: true,
          vulnerabilities_fixed: true,
          bug_fixes: true,
          new_features: true,
          breaking_changes: true,
          end_of_life: true,
          priority: '10',
          upgrade_status: 'Review',
          who: 'Test Admin',
          semester: 'Fall Quarter 2023',
          road_map: 'Road Map',
          upgrade_docs: 'www.example.com',
          qa_support_servers: 'server.example.com',
          dev_support_servers: 'dev.example.com',
          date_cert_expires: '2020-01-01',
          monitor_certificates: 'yes',
          themes: true,
          modules: true
        }
      end

      it 'updates the requested software_record' do
        software_record = SoftwareRecord.create! new_attributes
        put :update, params: { id: software_record.to_param, software_record: new_attributes }, session: valid_session
        software_record.reload
        expect(software_record.title).to eq('A Great Software v2.0')
        expect(software_record.description).to eq('An Updated good description of the software')
        expect(software_record.created_by).to eq('Test Owner')
        expect(software_record.developers).to have_content('Developer')
        expect(software_record.developers).to have_content('Developer2')
        expect(software_record.tech_leads).to have_content('Lead')
        expect(software_record.tech_leads).to have_content('Lead2')
        expect(software_record.product_owners).to have_content('Owner')
        expect(software_record.product_owners).to have_content('Owner2')
        expect(software_record.admin_users).to have_content('Admin')
        expect(software_record.admin_users).to have_content('Admin2')
        expect(software_record.service).to have_content('App Service')
        expect(software_record.installed_version).to have_content('4.5')
        expect(software_record.proposed_version).to have_content('4.4')
        expect(software_record.last_upgrade_date).to have_content('2020-02-02')
        expect(software_record.upgrade_available).to have_content('true')
        expect(software_record.priority).to have_content('10')
        expect(software_record.upgrade_status).to have_content('Review')
        expect(software_record.semester).to have_content('Fall Quarter 2023')
        expect(software_record.road_map).to have_content('Road Map')
        expect(software_record.upgrade_docs).to have_content('www.example.com')
        expect(software_record.qa_support_servers).to have_content('server.example.com')
        expect(software_record.dev_support_servers).to have_content('dev.example.com')
        expect(software_record.date_cert_expires).to have_content('2020-01-01')
        expect(software_record.monitor_certificates).to have_content('yes')
      end

      it 'redirects to the software_record' do
        software_record = SoftwareRecord.create! valid_attributes
        put :update, params: { id: software_record.to_param, software_record: valid_attributes }, session: valid_session
        expect(response).to redirect_to(software_record)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        software_record = SoftwareRecord.create! valid_attributes
        put :update, params: { id: software_record.to_param, software_record: invalid_attributes }, session: valid_session
        expect(response).to be_successful
        expect(response).to render_template(:edit)
        expect(response.body).to have_content("Title can\\'t be blank")
        expect(response.body).to have_content("Description can\\'t be blank")
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested software_record' do
      software_record = SoftwareRecord.create! valid_attributes
      expect do
        delete :destroy, params: { id: software_record.to_param }, session: valid_session
      end.to change(SoftwareRecord, :count).by(0)
    end

    it 'redirects to the software_records list' do
      software_record = SoftwareRecord.create! valid_attributes
      delete :destroy, params: { id: software_record.to_param }, session: valid_session
      expect(response).to_not redirect_to(software_records_url)
    end
  end
end
