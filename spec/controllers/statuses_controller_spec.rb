# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe StatusesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Status. As you add validations to Status, be sure to
  # adjust the attributes here as well.
  include Devise::Test::ControllerHelpers
  render_views

  let(:valid_attributes) do
    {
      title: 'Test',
      status_type: 'Design'
    }
  end

  let(:invalid_attributes) do
    {
      title: '',
      status_type: ''
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StatusesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  def sign_in_user(admin)
    sign_in admin
  end

  before do
    admin = FactoryBot.create(:admin)
    sign_in_user(admin)
  end

  describe 'GET #index' do
    it 'returns a success response' do
      Status.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      status = Status.create! valid_attributes
      get :show, params: { id: status.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      status = Status.create! valid_attributes
      get :edit, params: { id: status.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Status' do
        expect do
          post :create, params: { status: valid_attributes }, session: valid_session
        end.to change(Status, :count).by(1)
      end

      it 'redirects to the created status' do
        post :create, params: { status: valid_attributes }, session: valid_session
        expect(response).to redirect_to(Status.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { status: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        { title: 'Test Prod', status_type: 'Production' }
      end

      it 'updates the requested status' do
        status = Status.create! valid_attributes
        put :update, params: { id: status.to_param, status: new_attributes }, session: valid_session
        status.reload
        expect(status.title).to eq('Test Prod')
        expect(status.status_type).to eq('Production')
      end

      it 'redirects to the status' do
        status = Status.create! valid_attributes
        put :update, params: { id: status.to_param, status: valid_attributes }, session: valid_session
        expect(response).to redirect_to(status)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        status = Status.create! valid_attributes
        put :update, params: { id: status.to_param, status: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested status' do
      status = Status.create! valid_attributes
      expect do
        delete :destroy, params: { id: status.to_param }, session: valid_session
      end.to change(Status, :count).by(-1)
    end

    it 'redirects to the statuses list' do
      status = Status.create! valid_attributes
      delete :destroy, params: { id: status.to_param }, session: valid_session
      expect(response).to redirect_to(statuses_url)
    end
  end
end
